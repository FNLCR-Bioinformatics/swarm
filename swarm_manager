#!/usr/local/bin/perl
# ===========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#                     Center for Information Technology (CIT)
#                        National Institute of Health (NIH)
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software is freely available
#  to the public for use.  The Center for Information Technology, The
#  National Institutes of Health, and the U.S. Government have not placed
#  any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, CIT, NIH and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. CIT, NIH and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author and the "NIH Biowulf Cluster" in any work or product
#  based on this material.
#
# ===========================================================================
use strict;
use HPCNIH::Util::EmailTools;
use HPCNIH::Util::TimeTools;
use Storable;
use Fcntl ":flock";
use HPCNIH::Util::Tabulate;
use Data::Dumper;
use Date::Parse qw(str2time);
use HPCNIH::Util::PrintColors;
use HPCNIH::Util::Stopwatch;
use HPCNIH::Slurm::CurrentJobs;
use Time::Piece;
use POSIX qw(setsid strftime);
use DBI;
use FileHandle;
use File::Basename;
use POSIX qw(setsid strftime);
use FindBin qw($RealBin);
use Cwd 'abs_path';

my %OPT;
my %PAR;
$PAR{tempdir_index} = "/spin1/swarm/.tempdir.idx";
$PAR{swarm_index} = "/spin1/swarm/.swarm.idx";
$PAR{store} = "/spin1/swarm/.swarm.store";
$PAR{NOW} = time();
$PAR{age_unit} = 86400;
$PAR{delete_age} = 5; # remove files after 5 days
tie $PAR{stopwatch},'HPCNIH::Util::Stopwatch';

getOptions();

eval {
# Catch signals
  local $SIG{ALRM} = sub { die " TIMEOUT: $OPT{timeout} seconds elapsed" };
  local $SIG{INT} = sub { die " INT: don't interrupt me!" };
  local $SIG{KILL} = sub { die " KILL: arrggg!" };

# Set the alarm to go off -- do nothing if $OPT{timeout} is undefined
  alarm $OPT{timeout};

#--------------------------------------------------------------------------------------------------
# Stuff that needs a timeout goes here
#--------------------------------------------------------------------------------------------------

# open connection to mysql
  $PAR{dbh} = DBI->connect("DBI:mysql:;mysql_read_default_group=dashboard;mysql_read_default_file=/usr/local/etc/my.cnf;mysql_connect_timeout=10",undef,undef,{RaiseError=>0,PrintError=>0,AutoCommit=>0}) or try_connecting_again();

#  get_old_data_from_store();
  parse_index_files();
  parse_jobs_table();

# Print summary
  if ($OPT{dump}) {
    dump_and_exit();
  }
  elsif ($OPT{verbose} > 2) {
    print_full_data();
  }
  elsif ($OPT{verbose} > 1) {
    print_data();
  }
  else {
    print_data_summary();
  }

# Delete the directories and files
#  delete_directories_and_files() if ($OPT{delete});

# Make the data permanent
#  store_data() if ($OPT{update} && !$OPT{debug});

# Send a report if you must
  if ($OPT{emailTo}) {
    sendEmail(subject=>$0,message=>"test",emailTo=>$OPT{emailTo},Bcc=>$OPT{Bcc},debug=>$OPT{debug},provenance=>1);
  }

#--------------------------------------------------------------------------------------------------
# Done
#--------------------------------------------------------------------------------------------------

  alarm 0;
  1;  # default return value from eval
};

# Take action if either an error is given or the timeout was reached
if ( $@ ) {
  print STDERR $@;
  if ($OPT{emailTo}) {
    sendEmail(subject=>"ERROR: $0",message=>$@,emailTo=>$OPT{emailTo},Bcc=>$OPT{Bcc},debug=>$OPT{debug},provenance=>1);
  }
  exit 1;
}

#==================================================================================================
sub getOptions
{ 
  use Getopt::Long qw(:config no_ignore_case);
  Getopt::Long::Configure("bundling"); # allows option bundling
  GetOptions(
    'help' => \$OPT{help},
    'h' => \$OPT{help},
    'debug' => \$OPT{debug},
    'verbose=i' => \$OPT{verbose},
    'd' => \$OPT{debug},
    'dump' => \$OPT{dump},
    'delete' => \$OPT{delete},
    'report' => \$OPT{report},
    'update' => \$OPT{update},
    'tab' => \$OPT{tab},
    'timing' => \$OPT{timing},
    'v=i' => \$OPT{verbose},
    'timeout=i' => \$OPT{timeout}, 
    'email=s'=> \$OPT{emailTo},
    'bcc=s' => \$OPT{Bcc}, 
    'hours' => \$OPT{hours}, 
    'minutes' => \$OPT{minutes}, 
    'user=s' => \$OPT{user}, 
    'u=s' => \$OPT{user}, 
    'jobid=i' => \$OPT{jobid}, 
    'j=i' => \$OPT{jobid}, 
    'state=s' => \$OPT{state}, 
    's=s' => \$OPT{state}, 
  ) || printOptions();

  printOptions() if $OPT{help};

  unless ($OPT{update} || $OPT{report} || $OPT{delete}) {
    dieWithError("You must choose --report, --update, or --delete");
  }

  print STDERR "Running in debug mode\n" if $OPT{debug};
  $OPT{verbose} = 2 if ((defined $OPT{debug}) && (not defined $OPT{verbose}));
  $OPT{verbose} = 2 if ((defined $OPT{dump}) && (not defined $OPT{verbose}));

  if ($OPT{state} && (
    ($OPT{state} ne 'CREATED') && ($OPT{state} ne 'PENDING') && ($OPT{state} ne 'RUNNING')
    && ($OPT{state} ne 'FINISHED') && ($OPT{state} ne 'MIXED'))) {
    dieWithError("--state must be CREATED, PENDING, RUNNING, FINISHED or MIXED");
  }

  $OPT{update} = 1 if $OPT{delete};

  if ($OPT{update} && $>) {
    dieWithError("you must be root!");
  }
}
#==================================================================================================
sub printOptions
{
  my $msg = shift;
  warn "\n$msg\n" if $msg;

  print STDERR <<EOF;

Usage: $0 [ options ]

Description:

  Evaluate the states of swarms as recorded in the index files and the
  dashboard jobs table.  The information is displayed in increasing detail,
  depending on the value of --verbose and the presence of --dump.

  If --update is given, then the index files will be rotated, and the
  information will be stored in a store file.

  If --delete is given, then the temporary directories and symlink 
  associated with the swarm will be deleted, if it exists, and if the
  swarm finished more than $PAR{delete_age} days ago.  --update is
  also set, the index files are rotated, and the store file is
  appended.

  index files:

    $PAR{tempdir_index}
    $PAR{swarm_index}

  store file:

    $PAR{store}

Options:

  --report             print out current status, don't modify anything

  --update             wipe out index files, print to store file.  Must be
                       root.

  --delete             actually attempt to delete the swarm tempdir and 
                       associated files.  --delete implies --update.  Must
                       be root.

  -u/--user            show only those swarms owned by this user
  -j/--jobid           show only the swarm with this jobid
  -s/--state           show only swarms with this state (choose from CREATED,
                       PENDING, RUNNING, FINISHED, MIXED)

  --dump               dump the data in a hierarchical fashion

  --hours              show age in hours, rather than days
  --minutes            show age in minutes, rather than days

  --email <emails>     comma-delimited list of email addresses to receive
                       reports.  If --debug is given, the emails will NOT be
                       sent.
  --bcc <emails>       same as --email, except as bcc

  --timeout <seconds>  give a timeout for the script

  -h, --help           print options list
  -d, --debug          run in debug mode 
  -v, --verbose        increase verbosity level (0,1,2,3)

Last modification date: 30 Mar 2017 (David Hoover)

EOF
  
  exit;
}
#=================================================================================================
sub parse_index_files
{
  $PAR{stopwatch} = 0; # reset the stopwatch
# To keep things simple, the index files will be shifted
  system("/bin/cat $PAR{tempdir_index} >> $PAR{tempdir_index}.work");
  #system("/bin/cat /dev/null > $PAR{tempdir_index}") if ($OPT{update} && !$OPT{debug});
  system("/bin/cat $PAR{swarm_index} >> $PAR{swarm_index}.work");
  #system("/bin/cat /dev/null > $PAR{swarm_index}") if ($OPT{update} && !$OPT{debug});

# Parse tempdir_index file
  open FILE1, "<$PAR{tempdir_index}.work";
  LINE: while (<FILE1>) {
    chomp(my $line = $_);
    my ($time,$user,$t,$nsubjobs,$p) = split /,/,$line;
    $PAR{data}{$t}{create_time} = $time;
    $PAR{data}{$t}{user} = $user;
    $PAR{data}{$t}{tempname} = $t;
    $PAR{data}{$t}{nsubjobs} = $nsubjobs;
    $PAR{data}{$t}{p} = $p;
    $PAR{data}{$t}{state} = "CREATED";
    foreach my $i (0 .. $PAR{data}{$t}{nsubjobs}-1) {
      #${$PAR{data}{$t}{states}}[$i] = 'CREATED' unless (defined ${$PAR{data}{$t}{states}}[$i]);
      ${$PAR{data}{$t}{states}}[$i] = 'CREATED'; 
    }
  }
  close FILE1;

# Parse swarm_index file
  open FILE2, "<$PAR{swarm_index}.work";
  LINE2: while (<FILE2>) {
    chomp(my $line = $_);
    my ($time,$t,$jobid) = split /,/,$line;
    $PAR{data}{$t}{submit_time} = $time;
    $PAR{data}{$t}{jobid} = $jobid;
    $PAR{jobid2tempname}{$PAR{data}{$t}{jobid}}=$t;
    $PAR{data}{$t}{state} = "SUBMITTED";
    foreach my $i (0 .. $PAR{data}{$t}{nsubjobs}-1) {
      #${$PAR{data}{$t}{states}}[$i] = 'SUBMITTED' unless (defined ${$PAR{data}{$t}{states}}[$i]);
      ${$PAR{data}{$t}{states}}[$i] = 'SUBMITTED';
    }
  }
  close FILE2;

# Now removing the working index files
  unlink "$PAR{tempdir_index}.work","$PAR{swarm_index}.work";
  printBlue(sprintf "parse_index_files = %.2f\n",$PAR{stopwatch}) if $OPT{timing};
}
#=================================================================================================#
sub get_old_data_from_store
{
  open(FH, ">$PAR{store}.lck")        or dieWithError("can't create lock $PAR{store}.lck: $!");
  flock(FH, 2)                        or dieWithError( "can't flock $PAR{store}.lck: $!");
  my $hr = retrieve($PAR{store})      if (-f $PAR{store});
  close(FH)                           or dieWithError("can't remove lock $PAR{store}.lck: $!");
  unlink "$PAR{store}.lck";
  if (defined $hr) {
    ROW: foreach my $t (sort keys %{$hr}) { 
      next unless $t;
      $PAR{data}{$t} = $hr->{$t};
      $PAR{jobid2tempname}{$PAR{data}{$t}{jobid}}=$t if (defined $PAR{data}{$t}{jobid});
    }
  }
}
#==================================================================================================
sub store_data
{
  open(FH, ">$PAR{store}.lck")        or dieWithError("can't create lock $PAR{store}.lck: $!");
  flock(FH, 2)                        or dieWithError("can't flock $PAR{store}.lck: $!");
  unlink $PAR{store} if (-f $PAR{store});
  store($PAR{data},$PAR{store});
  close(FH)                           or dieWithError("can't remove lock $PAR{store}.lck: $!");
  unlink "$PAR{store}.lck";
  chmod 0644,$PAR{store};
}
#==================================================================================================
sub parse_jobs_table
{

# Do some filtering if needed
  my @f;
  push @f,"`user`='$OPT{user}'" if $OPT{user};
  push @f,"(`jobidarray` LIKE '$OPT{jobid}_%' OR `jobid` = $OPT{jobid})" if $OPT{jobid};
  my $filter;
  if (@f) {
    $filter = join " AND ",@f;
    $filter = "WHERE ".$filter;
  }

# Pull out everything from jobs table, and determine the tempdir name
  $PAR{stopwatch} = 0; # reset the stopwatch
  my $sql = "SELECT * FROM dashboard.jobs $filter";
  my $a = $PAR{dbh}->selectall_hashref($sql,["jobid"]);
  JOB: foreach my $jobid (sort keys %{$a}) { # sorting essential to populate states correctly
    my $t;
# Typically a swarm has a value in the jobidarray field
    if (defined $a->{$jobid}->{jobidarray}) {
      my $j = $1 if ($a->{$jobid}->{jobidarray}=~/^(\d+)_/);
      if ((defined $j) && (defined $PAR{jobid2tempname}{$j})) {
        $t = $PAR{jobid2tempname}{$j};
      }
    }
# The jobidarray value is not set if the swarm is cancelled before starting, I think
    elsif (defined $PAR{jobid2tempname}{$jobid}) {
      $t = $PAR{jobid2tempname}{$jobid};
    }

    next JOB unless $t; # Don't be stupid
    next JOB if _finished($t); # Don't bother if the swarm is finished

# Fill in the swarm arrays
    _fill_swarm_arrays($t,$a->{$jobid});

  } # end jobs table
  printBlue(sprintf "walk_jobs_table = %.2f\n",$PAR{stopwatch}) if $OPT{timing};

# What about unfinished swarms that were not found in the jobs database?
  $PAR{stopwatch} = 0; # reset the stopwatch
  SWARM2: foreach my $t (keys %{$PAR{data}}) {
    next SWARM2 if _finished($t);
    next SWARM2 unless (defined $PAR{data}{$t}{jobid});
    foreach my $i (0 .. $PAR{data}{$t}{nsubjobs}-1) {
# The subjob was seen in the jobs table at somepoint in time
      if (defined ${$PAR{data}{$t}{subjobid}}[$i]) {
        if (not defined $a->{${$PAR{data}{$t}{subjobid}}[$i]}->{jobid}) {
          ${$PAR{data}{$t}{states}}[$i] = 'EXPIRED';
        }
      }
# The subjob was never seen in the jobs table
      else {
        ${$PAR{data}{$t}{states}}[$i] = 'UNKNOWN';
      }
    }
  }
  printBlue(sprintf "rewalk_jobs_data = %.2f\n",$PAR{stopwatch}) if $OPT{timing};

  _simplify_states_and_end_times();
}
#=================================================================================================
sub _fill_swarm_arrays
# Add the jobid, state, and end_time for the subjobs represented by this line
{
  my ($t,$x) = @_;
# NOTE: This does not cover all possibilities for job arrays under Slurm.  However, swarm will
# only give a single subjob, or a range of subjobs, starting from 0.  --maxrunning will add a
# % sign followed by max simultaneous jobs.
  if ($x->{jobidarray} =~ /^\d+_(\d+)$/) {
    my $i = $1;
    _update_swarm_array($t,$x,$i);
  }
  elsif ($x->{jobidarray} =~ /^\d+_\[(\d+)\]$/) {
    my $i = $1;
    _update_swarm_array($t,$x,$i);
  }
  elsif ($x->{jobidarray} =~ /^\d+_\[(\d+)-(\d+)/) {
    foreach my $i ($1 .. $2) {
      _update_swarm_array($t,$x,$i);
    }
  }
# Likely the swarm was cancelled before it got out of pending
  elsif ((not defined $x->{jobidarray}) && (defined $PAR{data}{$t}{jobid}) && ($x->{jobid} == $PAR{data}{$t}{jobid})) {
    foreach my $i (0 .. $PAR{data}{$t}{nsubjobs}-1) {
      _update_swarm_array($t,$x,$i);
    }
  }
}
#=================================================================================================
sub _update_swarm_array
{
  my ($t,$x,$i) = @_;
  ${$PAR{data}{$t}{subjobid}}[$i] = $x->{jobid};
  if (defined $x->{state}) {
    ${$PAR{data}{$t}{states}}[$i] = $x->{state};
    if (defined $x->{end_time}) {
      ${$PAR{data}{$t}{end_times}}[$i] = $x->{end_time};
    } else {
      ${$PAR{data}{$t}{end_times}}[$i] = 0;
    }
  }
}
#=================================================================================================
sub _simplify_states_and_end_times
{
  $PAR{stopwatch} = 0; # reset the stopwatch
# Simplify the states into a single state
  SWARM: foreach my $t (keys %{$PAR{data}}) {

# Don't bother if the swarm is finished
    next SWARM if _finished($t); 

# Find max end_time, if possible
    if ($PAR{data}{$t}{end_times}) {
      E: foreach my $e (@{$PAR{data}{$t}{end_times}}) {
        next E unless ($e > 0);
        if (not defined $PAR{data}{$t}{max_end_time}) {
          $PAR{data}{$t}{max_end_time} = $e;
        }
        elsif ($PAR{data}{$t}{max_end_time} < $e) {
          $PAR{data}{$t}{max_end_time} = $e;
        }
      }
    }
    my %tmp; $tmp{C}=0; $tmp{S}=0; $tmp{P}=0; $tmp{R}=0; $tmp{F}=0; $tmp{E}=0; $tmp{U}=0; $tmp{done}=0;
    if ($PAR{data}{$t}{states}) {
      foreach my $s (@{$PAR{data}{$t}{states}}) {
        if ($s eq 'CREATED') { $tmp{C}++; }
        elsif ($s eq 'SUBMITTED') { $tmp{S}++; }
        elsif ($s eq 'PENDING') { $tmp{P}++; }
        elsif ($s eq 'RUNNING') { $tmp{R}++; }
        elsif ($s eq 'EXPIRED') { $tmp{E}++; $tmp{done}++; }
        elsif ($s eq 'UNKNOWN') { $tmp{U}++; $tmp{done}++; }
        else { $tmp{F}++; $tmp{done}++; }
      }

# The state reported will either be C, S, P, R, F, or M

# The state is uniform:
      if    ($PAR{data}{$t}{nsubjobs} == $tmp{C}) { _update_value($t,'state','CREATED'); }
      elsif ($PAR{data}{$t}{nsubjobs} == $tmp{S}) { _update_value($t,'state','SUBMITTED'); }
      elsif ($PAR{data}{$t}{nsubjobs} == $tmp{P}) { _update_value($t,'state','PENDING'); }
      elsif ($PAR{data}{$t}{nsubjobs} == $tmp{R}) { _update_value($t,'state','RUNNING'); }
      elsif ($PAR{data}{$t}{nsubjobs} == $tmp{E}) { _update_value($t,'state','EXPIRED'); }
      elsif ($PAR{data}{$t}{nsubjobs} == $tmp{U}) { _update_value($t,'state','UNKNOWN'); }
      elsif (($PAR{data}{$t}{nsubjobs} == $tmp{F}) && (defined $PAR{data}{$t}{max_end_time}) && ($PAR{data}{$t}{max_end_time} =~ /^\d+$/)) {
        _update_value($t,'state','FINISHED');
        _update_value($t,'end_time',$PAR{data}{$t}{max_end_time});
      }
# The state is mixed
      else { 
# The substates are uniformly done states 
        if ($PAR{data}{$t}{nsubjobs} == $tmp{done}) {
          _update_value($t,'state','FINISHED');
# At least one of the subjobs has finished with an end_time
          if ((defined $PAR{data}{$t}{max_end_time}) && ($PAR{data}{$t}{max_end_time} =~ /^\d+$/)) {
            _update_value($t,'end_time',$PAR{data}{$t}{max_end_time});
          }
# The whole swarm is expired or unknown
          else {
            _update_value($t,'end_time',$PAR{data}{$t}{create_time});
          }
        } 
# The substates are a mixture of done and undone states
        else {
          _update_value($t,'state','MIXED'); 
        }
      }
    }
  }
  printBlue(sprintf "simpify_states = %.2f\n",$PAR{stopwatch}) if $OPT{timing};
}
#=================================================================================================
sub _update_value
{
  my ($t,$key,$value) = @_;
  return unless ((defined $t) && (defined $key) && (defined $value));
  #if ((not defined $PAR{data}{$t}{$key}) || ($PAR{data}{$t}{$key} ne $value)) {
    #undef $PAR{UNCHANGED}{$t};
    $PAR{data}{$t}{$key} = $value;
  #}
}
#=================================================================================================
sub print_data
{
  $PAR{stopwatch} = 0; # reset the stopwatch
  my $x;
  foreach my $t (keys %{$PAR{data}}) {
    next if ($OPT{user} && ($PAR{data}{$t}{user} ne $OPT{user}));
    next if ($OPT{jobid} && ($PAR{data}{$t}{jobid} ne $OPT{jobid}));
    next if ($OPT{state} && ($PAR{data}{$t}{state} ne $OPT{state}));
    if (_deletable($t)) {
        $PAR{data}{$t}{action} = 'DELETE';
    }
    else {
      $PAR{data}{$t}{action} = 'KEEP';
    }
    $PAR{data}{$t}{age} = _find_age($t);
    if ($OPT{delete}) {
      push @{$x},$PAR{data}{$t} if ($PAR{data}{$t}{action} eq 'DELETE');
    }
    else {
      push @{$x},$PAR{data}{$t}; 
    }
  }

  my $m1 =  createMatrix(array=>$x,horizontal=>1,fields=>['tempname','user','state','age','action','jobid','nsubjobs','p']);
  if ($OPT{tab}) {
    print printMatrix($m1) . "\n";
  }
  else {
    print printMatrixNeatly(matrix=>$m1,horizontal_separator=>1,horizontal_character=>'=') . "\n";
  }
  printBlue(sprintf "print_data = %.2f\n",$PAR{stopwatch}) if $OPT{timing};
}
#=================================================================================================
sub _find_age
{
  my $t = shift;
  my $age;
  my $age_unit = $PAR{age_unit};
  $age_unit = 3600 if $OPT{hours};
  $age_unit = 60 if $OPT{minutes};

  if ($PAR{data}{$t}{max_end_time}) {
    $age = int(($PAR{NOW}-$PAR{data}{$t}{max_end_time})/$age_unit);
  } elsif ($PAR{data}{$t}{submit_time}) {
    $age = int(($PAR{NOW}-$PAR{data}{$t}{submit_time})/$age_unit);
  } elsif ($PAR{data}{$t}{create_time}) {
    $age = int(($PAR{NOW}-$PAR{data}{$t}{create_time})/$age_unit);
  } else {
    $age = -1;
  }
  return $age;
}
#=================================================================================================
sub print_data_summary
{
  $PAR{stopwatch} = 0; # reset the stopwatch
  my $x;
  foreach my $t (keys %{$PAR{data}}) {
    next if ($OPT{user} && ($PAR{data}{$t}{user} ne $OPT{user}));
    next if ($OPT{jobid} && ($PAR{data}{$t}{jobid} ne $OPT{jobid}));
    next if ($OPT{state} && ($PAR{data}{$t}{state} ne $OPT{state}));
    $x->{finished}++ if _finished($t);
    $x->{created}++ if ($PAR{data}{$t}{state} eq 'CREATED');
    $x->{submitted}++ if ($PAR{data}{$t}{state} eq 'SUBMITTED');
    $x->{expired}++ if ($PAR{data}{$t}{state} eq 'EXPIRED');
    $x->{pending}++ if ($PAR{data}{$t}{state} eq 'PENDING');
    $x->{running}++ if ($PAR{data}{$t}{state} eq 'RUNNING');
    $x->{mixed}++ if ($PAR{data}{$t}{state} eq 'MIXED');
    $x->{unknown}++ if ($PAR{data}{$t}{state} eq 'UNKNOWN');
    $x->{files} += 2 + ($PAR{data}{$t}{nsubjobs}*$PAR{data}{$t}{p});
    if (_deletable($t)) {
      if (defined $PAR{data}{$t}{jobid}) {
        if (_finished($t)) {
          $x->{delete}++;
        }
        else { # still pending or running
          $x->{keep}++;
        }
      }
    }
    else {
      $x->{keep}++;
    }
  }
  printf ("files=%d\ncreated=%d,submitted=%d,pending=%d,running=%d,finished=%d,mixed=%d,expired=%d,unknown=%d\ndelete=%d,keep=%d\n",
    $x->{files}, $x->{created}, $x->{submitted}, 
    $x->{pending}, $x->{running}, $x->{finished}, $x->{mixed}, $x->{expired}, $x->{unknown},
    $x->{delete}, $x->{keep},
  );
  printBlue(sprintf "print_data_summary = %.2f\n",$PAR{stopwatch}) if $OPT{timing};
}
#=================================================================================================
sub delete_directories_and_files
{
  my $list;
  my %new;
  my $i = 0;
  foreach my $t (keys %{$PAR{data}}) {
    if ($OPT{user}) {
      if ((not defined $PAR{data}{$t}{user}) || ($PAR{data}{$t}{user} ne $OPT{user})) {
        $new{$t} = $PAR{data}{$t}; # keep the data
        next;
      }
    }
    if ($OPT{jobid}) {
      if ((not defined $PAR{data}{$t}{jobid}) || ($PAR{data}{$t}{jobid} ne $OPT{jobid})) {
        $new{$t} = $PAR{data}{$t}; # keep the data
        next;
      }
    }
    if (_deletable($t)) {
      $i++;
      $list .= " /spin1/swarm/".$PAR{data}{$t}{user}."/".$t if ($t);
      my $print_list = "rm -rf /spin1/swarm/".$PAR{data}{$t}{user}."/".$t;
      $list .= " /spin1/swarm/".$PAR{data}{$t}{user}."/".$PAR{data}{$t}{jobid} if ($PAR{data}{$t}{jobid});
      $print_list .= " /spin1/swarm/".$PAR{data}{$t}{user}."/".$PAR{data}{$t}{jobid}."\n" if ($PAR{data}{$t}{jobid});
      print $print_list if (defined $OPT{verbose} && $OPT{verbose} > 2);
# Remove the tempdir and the link, if possible
      if (!($i%20)) {
        my $cmd = "rm -rf $list";
        undef $list;
        system($cmd) unless $OPT{debug};
      }
    }
    else {
      $new{$t} = $PAR{data}{$t};
    }
  }
  if ($list) {
    my $cmd = "rm -rf $list";
    undef $list;
    system($cmd) unless $OPT{debug};
  }
  %{$PAR{data}} = %new;
}
#=================================================================================================
sub _deletable
{
  my $t = shift;
  my $age;
  if ($PAR{data}{$t}{max_end_time}) {
    $age = int(($PAR{NOW}-$PAR{data}{$t}{max_end_time})/$PAR{age_unit});
  } elsif ($PAR{data}{$t}{submit_time}) {
    $age = int(($PAR{NOW}-$PAR{data}{$t}{submit_time})/$PAR{age_unit});
  } elsif ($PAR{data}{$t}{create_time}) {
    $age = int(($PAR{NOW}-$PAR{data}{$t}{create_time})/$PAR{age_unit});
  } else {
    $age = -1;
  }
  if (($age > $PAR{delete_age}) && (((defined $PAR{data}{$t}{jobid}) && _finished($t)) || ($PAR{data}{$t}{state} eq 'CREATED') || ($PAR{data}{$t}{state} eq 'UNKNOWN'))) {
    return 1;
  }
}
#=================================================================================================
sub _finished
{
  my $t = shift;
  return 1 if ((defined $PAR{data}{$t}{state}) && ($PAR{data}{$t}{state} eq 'FINISHED') && (defined $PAR{data}{$t}{max_end_time})); 
}
#=================================================================================================
sub dump_and_exit
{
  my $x;
  if ($OPT{user} || $OPT{jobid}) {
    foreach my $t (keys %{$PAR{data}}) {
      next if ($OPT{user} && ($PAR{data}{$t}{user} ne $OPT{user}));
      next if ($OPT{jobid} && ($PAR{data}{$t}{jobid} ne $OPT{jobid}));
      next if ($OPT{state} && ($PAR{data}{$t}{state} ne $OPT{state}));
      $x->{$t} = $PAR{data}{$t};
    }
  }
  else {
    $x = $PAR{data};
  }
  $Data::Dumper::Maxdepth=$OPT{verbose};
  print Dumper($x);
  exit;
}
#=================================================================================================
sub print_full_data
{
  $PAR{stopwatch} = 0; # reset the stopwatch
  my @printArray;
  foreach my $t (keys %{$PAR{data}}) {
    next if ($OPT{user} && ($PAR{data}{$t}{user} ne $OPT{user}));
    next if ($OPT{jobid} && ($PAR{data}{$t}{jobid} ne $OPT{jobid}));
    next if ($OPT{state} && ($PAR{data}{$t}{state} ne $OPT{state}));
    if (_deletable($t)) {
      $PAR{data}{$t}{action} = 'DELETE';
    }
    else {
      $PAR{data}{$t}{action} = 'KEEP';
    }

# If the swarm was never submitted, only list the global values
    if (!$PAR{data}{$t}{submit_time}) {
      _add_created_swarm(\@printArray,$t);
# If the swarm was submitted, list values for each subjob
    } else {
      foreach my $i (0 .. $PAR{data}{$t}{nsubjobs}-1) {
        if ($i == 0) {
          _add_first_subjob(\@printArray,$t,$i,(_determine_subjob_age($t,$i)));
        } else {
          _add_subjob(\@printArray,$t,$i,(_determine_subjob_age($t,$i)));
        }
      }
    }
  }
  my $m1 =  createMatrix(array=>\@printArray,horizontal=>1,fields=>['tempname','user','state','age','action','jobid','nsj','p','cmd','sjobid','sstate','sage']);
  if ($OPT{tab}) {
    print printMatrix($m1) . "\n";
  }
  else {
    print printMatrixNeatly(matrix=>$m1,horizontal_separator=>1,horizontal_character=>'=') . "\n";
  }
  printBlue(sprintf "print_full_data = %.2f\n",$PAR{stopwatch}) if $OPT{timing};
}
#=================================================================================================
sub _determine_subjob_age
{
  my ($t,$i) = @_;
  my $s;
  if ((${$PAR{data}{$t}{states}}[$i] eq 'SUBMITTED') || (${$PAR{data}{$t}{states}}[$i] eq 'PENDING') || (${$PAR{data}{$t}{states}}[$i] eq 'RUNNING')) {
    $s = $PAR{NOW} - $PAR{data}{$t}{submit_time};
  } elsif (defined ${$PAR{data}{$t}{end_times}}[$i]) {
    $s = $PAR{NOW} - ${$PAR{data}{$t}{end_times}}[$i];
  } else {
    $s = $PAR{NOW} - $PAR{data}{$t}{create_time};
  }

# Recalculate age if needed
  if ($OPT{hours}) {
    $s = int($s/3600);
  } elsif ($OPT{minutes}) {
    $s = int($s/60);
  } else {
    $s = int($s/86400);
  }
  return $s;
}
#=================================================================================================
sub dieWithError
{
  my $message = shift;
  die "ERROR: $message\n";
}
#=================================================================================================
sub _add_first_subjob
{
  my ($y,$t,$i,$sage) = @_;
  return if ($OPT{delete} && ($PAR{data}{$t}{action} ne 'DELETE'));
  push @{$y}, {
    tempname => $PAR{data}{$t}{tempname},
    user => $PAR{data}{$t}{user},
    jobid => $PAR{data}{$t}{jobid},
    state => $PAR{data}{$t}{state},
    age => _find_age($t),
    action => $PAR{data}{$t}{action},
    nsj => $PAR{data}{$t}{nsubjobs},
    p => $PAR{data}{$t}{p},
    cmd => $i,
    sjobid => ${$PAR{data}{$t}{subjobid}}[$i],
    sstate => ${$PAR{data}{$t}{states}}[$i],
    sage => $sage,
  };
}
#=================================================================================================
sub _add_subjob
{
  my ($y,$t,$i,$sage) = @_;
  return if ($OPT{delete} && ($PAR{data}{$t}{action} ne 'DELETE'));
  push @{$y}, {
    tempname => "-",
    user => "-",
    jobid => "-",
    state => "-",
    age => "-",
    action => "-",
    nsj => "-",
    p => "-",
    cmd => $i,
    sjobid => ${$PAR{data}{$t}{subjobid}}[$i],
    sstate => ${$PAR{data}{$t}{states}}[$i],
    sage => $sage,
  };
}
#=================================================================================================
sub _add_created_swarm
{
  my ($y,$t) = @_;
  return if ($OPT{delete} && ($PAR{data}{$t}{action} ne 'DELETE'));
  push @{$y}, {
    tempname => $PAR{data}{$t}{tempname},
    user => $PAR{data}{$t}{user},
    jobid => $PAR{data}{$t}{jobid},
    state => $PAR{data}{$t}{state},
    age => _find_age($t),
    action => $PAR{data}{$t}{action},
    nsj => $PAR{data}{$t}{nsubjobs},
    p => $PAR{data}{$t}{p},
  };
}
#=================================================================================================
